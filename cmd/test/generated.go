// Code generated by xgen. DO NOT EDIT.

package test

import "encoding/xml"

// AddRecord ...
type AddRecord struct {
	LD              *Logon  `xml:"ns1:LD,omitempty"`
	NTableID        int64   `xml:"ns1:nTableID"`
	NSiteID         int64   `xml:"ns1:nSiteID"`
	StrXML          *string `xml:"ns1:strXML,omitempty"`
	BEchoRecord     *bool   `xml:"ns1:bEchoRecord,omitempty"`
	StrEchoedRecord *string `xml:"ns1:strEchoedRecord,omitempty"`
	NNewID          int64   `xml:"ns1:nNewID"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// AddRecordResponse ...
type AddRecordResponse struct {
	AddRecordResult bool    `xml:"ns1:AddRecordResult"`
	StrEchoedRecord *string `xml:"ns1:strEchoedRecord,omitempty"`
	NNewID          int64   `xml:"ns1:nNewID"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// AddRecordSC ...
type AddRecordSC struct {
	LD              *Logon  `xml:"ns1:LD,omitempty"`
	NTableID        int64   `xml:"ns1:nTableID"`
	NSiteID         int64   `xml:"ns1:nSiteID"`
	NControllerID   int64   `xml:"ns1:nControllerID"`
	StrXML          *string `xml:"ns1:strXML,omitempty"`
	BEchoRecord     *bool   `xml:"ns1:bEchoRecord,omitempty"`
	StrEchoedRecord *string `xml:"ns1:strEchoedRecord,omitempty"`
	NNewID          int64   `xml:"ns1:nNewID"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// AddRecordSCResponse ...
type AddRecordSCResponse struct {
	AddRecordSCResult bool    `xml:"ns1:AddRecordSCResult"`
	StrEchoedRecord   *string `xml:"ns1:strEchoedRecord,omitempty"`
	NNewID            int64   `xml:"ns1:nNewID"`
	NErrorCode        int64   `xml:"ns1:nErrorCode"`
	StrErrorXML       *string `xml:"ns1:strErrorXML,omitempty"`
}

// UpdateRecord ...
type UpdateRecord struct {
	LD              *Logon  `xml:"ns1:LD,omitempty"`
	NTableID        int64   `xml:"ns1:nTableID"`
	NParentID       int64   `xml:"ns1:nParentID"`
	NRecordID       int64   `xml:"ns1:nRecordID"`
	StrXML          *string `xml:"ns1:strXML,omitempty"`
	BEchoRecord     *bool   `xml:"ns1:bEchoRecord,omitempty"`
	StrEchoedRecord *string `xml:"ns1:strEchoedRecord,omitempty"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// UpdateRecordResponse ...
type UpdateRecordResponse struct {
	UpdateRecordResult bool    `xml:"ns1:UpdateRecordResult"`
	StrEchoedRecord    *string `xml:"ns1:strEchoedRecord,omitempty"`
	NErrorCode         int64   `xml:"ns1:nErrorCode"`
	StrErrorXML        *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetRecord ...
type GetRecord struct {
	LD          *Logon  `xml:"ns1:LD,omitempty"`
	NTableID    int64   `xml:"ns1:nTableID"`
	NParentID   int64   `xml:"ns1:nParentID"`
	NRecordID   int64   `xml:"ns1:nRecordID"`
	StrXML      *string `xml:"ns1:strXML,omitempty"`
	NErrorCode  int64   `xml:"ns1:nErrorCode"`
	StrErrorXML *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetRecordResponse ...
type GetRecordResponse struct {
	GetRecordResult bool    `xml:"ns1:GetRecordResult"`
	StrXML          *string `xml:"ns1:strXML,omitempty"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// DeleteRecord ...
type DeleteRecord struct {
	LD          *Logon  `xml:"ns1:LD,omitempty"`
	NTableID    int64   `xml:"ns1:nTableID"`
	NParentID   int64   `xml:"ns1:nParentID"`
	NRecordID   int64   `xml:"ns1:nRecordID"`
	NErrorCode  int64   `xml:"ns1:nErrorCode"`
	StrErrorXML *string `xml:"ns1:strErrorXML,omitempty"`
}

// DeleteRecordResponse ...
type DeleteRecordResponse struct {
	DeleteRecordResult bool    `xml:"ns1:DeleteRecordResult"`
	NErrorCode         int64   `xml:"ns1:nErrorCode"`
	StrErrorXML        *string `xml:"ns1:strErrorXML,omitempty"`
}

// ListRecords ...
type ListRecords struct {
	LD            *Logon       `xml:"ns1:LD,omitempty"`
	NTableID      int64        `xml:"ns1:nTableID"`
	NParentID     int64        `xml:"ns1:nParentID"`
	NStart        int64        `xml:"ns1:nStart"`
	NNumberOfRows int64        `xml:"ns1:nNumberOfRows"`
	NRecordGroup  int64        `xml:"ns1:nRecordGroup"`
	NReserved     int64        `xml:"ns1:nReserved"`
	BAtStart      bool         `xml:"ns1:bAtStart"`
	BAtEnd        bool         `xml:"ns1:bAtEnd"`
	RData         *DeviceNames `xml:"ns1:RData,omitempty"`
	NErrorCode    int64        `xml:"ns1:nErrorCode"`
	StrErrorXML   *string      `xml:"ns1:strErrorXML,omitempty"`
}

// ListRecordsResponse ...
type ListRecordsResponse struct {
	ListRecordsResult bool         `xml:"ns1:ListRecordsResult"`
	BAtStart          bool         `xml:"ns1:bAtStart"`
	BAtEnd            bool         `xml:"ns1:bAtEnd"`
	RData             *DeviceNames `xml:"ns1:RData,omitempty"`
	NErrorCode        int64        `xml:"ns1:nErrorCode"`
	StrErrorXML       *string      `xml:"ns1:strErrorXML,omitempty"`
}

// EventReportByRecordGroup ...
type EventReportByRecordGroup struct {
	LD            *Logon                `xml:"ns1:LD,omitempty"`
	NSiteID       int                   `xml:"ns1:nSiteID"`
	NRecordGroup  int                   `xml:"ns1:nRecordGroup"`
	NStart        int64                 `xml:"ns1:nStart"`
	NNumberOfRows int64                 `xml:"ns1:nNumberOfRows"`
	NLanguage     int                   `xml:"ns1:nLanguage"`
	StrStartDate  *string               `xml:"ns1:strStartDate,omitempty"`
	BUseStartDate bool                  `xml:"ns1:bUseStartDate"`
	StrEndDate    *string               `xml:"ns1:strEndDate,omitempty"`
	BUseEndDate   bool                  `xml:"ns1:bUseEndDate"`
	Names         *ReportDataCollection `xml:"ns1:Names,omitempty"`
	NErrorCode    int                   `xml:"ns1:nErrorCode"`
	StrErrorXML   *string               `xml:"ns1:strErrorXML,omitempty"`
}

// EventReportByRecordGroupResponse ...
type EventReportByRecordGroupResponse struct {
	EventReportByRecordGroupResult bool                  `xml:"ns1:EventReportByRecordGroupResult"`
	Names                          *ReportDataCollection `xml:"ns1:Names,omitempty"`
	NErrorCode                     int                   `xml:"ns1:nErrorCode"`
	StrErrorXML                    *string               `xml:"ns1:strErrorXML,omitempty"`
}

// EventReportByUser ...
type EventReportByUser struct {
	LD            *Logon                `xml:"ns1:LD,omitempty"`
	NSiteID       int                   `xml:"ns1:nSiteID"`
	NUserID       int                   `xml:"ns1:nUserID"`
	NStart        int64                 `xml:"ns1:nStart"`
	NNumberOfRows int64                 `xml:"ns1:nNumberOfRows"`
	NLanguage     int                   `xml:"ns1:nLanguage"`
	StrStartDate  *string               `xml:"ns1:strStartDate,omitempty"`
	BUseStartDate bool                  `xml:"ns1:bUseStartDate"`
	StrEndDate    *string               `xml:"ns1:strEndDate,omitempty"`
	BUseEndDate   bool                  `xml:"ns1:bUseEndDate"`
	Data          *ReportDataCollection `xml:"ns1:Data,omitempty"`
	NErrorCode    int                   `xml:"ns1:nErrorCode"`
	StrErrorXML   *string               `xml:"ns1:strErrorXML,omitempty"`
}

// EventReportByUserResponse ...
type EventReportByUserResponse struct {
	EventReportByUserResult bool                  `xml:"ns1:EventReportByUserResult"`
	Data                    *ReportDataCollection `xml:"ns1:Data,omitempty"`
	NErrorCode              int                   `xml:"ns1:nErrorCode"`
	StrErrorXML             *string               `xml:"ns1:strErrorXML,omitempty"`
}

// GetCurrentLogon ...
type GetCurrentLogon interface{}

// GetCurrentLogonResponse ...
type GetCurrentLogonResponse struct {
	GetCurrentLogonResult *string `xml:"ns1:GetCurrentLogonResult,omitempty"`
}

// SetLogon ...
type SetLogon struct {
	LD *LogonData `xml:"ns1:LD,omitempty"`
	L  *Logon     `xml:"ns1:L,omitempty"`
}

// SetLogonResponse ...
type SetLogonResponse struct {
	LD *LogonData `xml:"ns1:LD,omitempty"`
}

// TestMainDatabaseConnection ...
type TestMainDatabaseConnection struct {
	StrError *string `xml:"ns1:strError,omitempty"`
}

// TestMainDatabaseConnectionResponse ...
type TestMainDatabaseConnectionResponse struct {
	TestMainDatabaseConnectionResult bool    `xml:"ns1:TestMainDatabaseConnectionResult"`
	StrError                         *string `xml:"ns1:strError,omitempty"`
}

// TestEventDatabaseConnection ...
type TestEventDatabaseConnection struct {
	StrError *string `xml:"ns1:strError,omitempty"`
}

// TestEventDatabaseConnectionResponse ...
type TestEventDatabaseConnectionResponse struct {
	TestEventDatabaseConnectionResult bool    `xml:"ns1:TestEventDatabaseConnectionResult"`
	StrError                          *string `xml:"ns1:strError,omitempty"`
}

// GetDeviceStatus ...
type GetDeviceStatus struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NType         int64  `xml:"ns1:nType"`
	NAddress      int64  `xml:"ns1:nAddress"`
	NAddress2     int64  `xml:"ns1:nAddress2"`
	NStatus1      int64  `xml:"ns1:nStatus1"`
	NStatus2      int64  `xml:"ns1:nStatus2"`
	NStatus3      int64  `xml:"ns1:nStatus3"`
	NErrorCode    int64  `xml:"ns1:nErrorCode"`
}

// GetDeviceStatusResponse ...
type GetDeviceStatusResponse struct {
	GetDeviceStatusResult bool  `xml:"ns1:GetDeviceStatusResult"`
	NStatus1              int64 `xml:"ns1:nStatus1"`
	NStatus2              int64 `xml:"ns1:nStatus2"`
	NStatus3              int64 `xml:"ns1:nStatus3"`
	NErrorCode            int64 `xml:"ns1:nErrorCode"`
}

// ControlFloor ...
type ControlFloor struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NElevatorCar  int64  `xml:"ns1:nElevatorCar"`
	NFloorIndex   int64  `xml:"ns1:nFloorIndex"`
	Control       string `xml:"ns1:Control"`
	NTime         int64  `xml:"ns1:nTime"`
}

// ControlFloorResponse ...
type ControlFloorResponse struct {
	ControlFloorResult bool `xml:"ns1:ControlFloorResult"`
}

// ControlPGM ...
type ControlPGM struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NPGMIndex     int64  `xml:"ns1:nPGMIndex"`
	Control       string `xml:"ns1:Control"`
	NTime         int64  `xml:"ns1:nTime"`
}

// ControlPGMResponse ...
type ControlPGMResponse struct {
	ControlPGMResult bool `xml:"ns1:ControlPGMResult"`
}

// ControlArea ...
type ControlArea struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NAreaIndex    int64  `xml:"ns1:nAreaIndex"`
	Control       string `xml:"ns1:Control"`
}

// ControlAreaResponse ...
type ControlAreaResponse struct {
	ControlAreaResult bool `xml:"ns1:ControlAreaResult"`
}

// ControlProgFunc ...
type ControlProgFunc struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NDoorIndex    int64  `xml:"ns1:nDoorIndex"`
	Control       string `xml:"ns1:Control"`
}

// ControlProgFuncResponse ...
type ControlProgFuncResponse struct {
	ControlProgFuncResult bool `xml:"ns1:ControlProgFuncResult"`
}

// ControlDoor ...
type ControlDoor struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NDoorIndex    int64  `xml:"ns1:nDoorIndex"`
	Control       string `xml:"ns1:Control"`
}

// ControlDoorResponse ...
type ControlDoorResponse struct {
	ControlDoorResult bool `xml:"ns1:ControlDoorResult"`
}

// ControlZone ...
type ControlZone struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NZoneIndex    int64  `xml:"ns1:nZoneIndex"`
	Control       string `xml:"ns1:Control"`
	ZoneType      string `xml:"ns1:ZoneType"`
}

// ControlZoneResponse ...
type ControlZoneResponse struct {
	ControlZoneResult bool `xml:"ns1:ControlZoneResult"`
}

// ModuleCommand ...
type ModuleCommand struct {
	LD             *Logon `xml:"ns1:LD,omitempty"`
	NSiteID        int64  `xml:"ns1:nSiteID"`
	NControllerID  int64  `xml:"ns1:nControllerID"`
	Command        string `xml:"ns1:Command"`
	Type           string `xml:"ns1:Type"`
	NModuleAddress int64  `xml:"ns1:nModuleAddress"`
}

// ModuleCommandResponse ...
type ModuleCommandResponse struct {
	ModuleCommandResult bool `xml:"ns1:ModuleCommandResult"`
}

// ControlService ...
type ControlService struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	NServiceType  int64  `xml:"ns1:nServiceType"`
	NIndex        int64  `xml:"ns1:nIndex"`
	Control       string `xml:"ns1:Control"`
}

// ControlServiceResponse ...
type ControlServiceResponse struct {
	ControlServiceResult bool `xml:"ns1:ControlServiceResult"`
}

// SetDateTime ...
type SetDateTime struct {
	LD            *Logon `xml:"ns1:LD,omitempty"`
	NSiteID       int64  `xml:"ns1:nSiteID"`
	NControllerID int64  `xml:"ns1:nControllerID"`
	DtTime        string `xml:"ns1:dtTime"`
	DtUTCTime     string `xml:"ns1:dtUTCTime"`
	PCookie       int64  `xml:"ns1:pCookie"`
}

// SetDateTimeResponse ...
type SetDateTimeResponse struct {
	SetDateTimeResult bool  `xml:"ns1:SetDateTimeResult"`
	PCookie           int64 `xml:"ns1:pCookie"`
}

// InitialiseKabaKey ...
type InitialiseKabaKey struct {
	LD            *Logon  `xml:"ns1:LD,omitempty"`
	NSiteID       int64   `xml:"ns1:nSiteID"`
	NUserID       int64   `xml:"ns1:nUserID"`
	SKabaKeyBoxID *string `xml:"ns1:sKabaKeyBoxID,omitempty"`
	SFromCaller   *string `xml:"ns1:sFromCaller,omitempty"`
	SKabaKeyID    *string `xml:"ns1:sKabaKeyID,omitempty"`
	SErrorCode    *string `xml:"ns1:sErrorCode,omitempty"`
	SDescription  *string `xml:"ns1:sDescription,omitempty"`
}

// InitialiseKabaKeyResponse ...
type InitialiseKabaKeyResponse struct {
	InitialiseKabaKeyResult bool    `xml:"ns1:InitialiseKabaKeyResult"`
	SKabaKeyID              *string `xml:"ns1:sKabaKeyID,omitempty"`
	SErrorCode              *string `xml:"ns1:sErrorCode,omitempty"`
	SDescription            *string `xml:"ns1:sDescription,omitempty"`
}

// ControlDevice ...
type ControlDevice struct {
	LD                *Logon       `xml:"ns1:LD,omitempty"`
	NSiteID           int64        `xml:"ns1:nSiteID"`
	NControllerID     int64        `xml:"ns1:nControllerID"`
	NControlType      int64        `xml:"ns1:nControlType"`
	NControlIndex     int64        `xml:"ns1:nControlIndex"`
	NControlOperation int64        `xml:"ns1:nControlOperation"`
	NErrorCode        int64        `xml:"ns1:nErrorCode"`
	List              *ArrayOflong `xml:"ns1:list,omitempty"`
}

// ControlDeviceResponse ...
type ControlDeviceResponse struct {
	ControlDeviceResult bool  `xml:"ns1:ControlDeviceResult"`
	NErrorCode          int64 `xml:"ns1:nErrorCode"`
}

// ResetPassword ...
type ResetPassword struct {
	LD          *Logon  `xml:"ns1:LD,omitempty"`
	NOperatorID int64   `xml:"ns1:nOperatorID"`
	StrNew      *string `xml:"ns1:strNew,omitempty"`
	BResult     bool    `xml:"ns1:bResult"`
}

// ResetPasswordResponse ...
type ResetPasswordResponse struct {
	ResetPasswordResult bool `xml:"ns1:ResetPasswordResult"`
	BResult             bool `xml:"ns1:bResult"`
}

// GetStatusListStatus ...
type GetStatusListStatus struct {
	LD               *Logon  `xml:"ns1:LD,omitempty"`
	BChangesOnly     bool    `xml:"ns1:bChangesOnly"`
	DtCompareRefDate string  `xml:"ns1:dtCompareRefDate"`
	NSiteID          int64   `xml:"ns1:nSiteID"`
	NStatusListID    int64   `xml:"ns1:nStatusListID"`
	DtRef            string  `xml:"ns1:dtRef"`
	StrXML           *string `xml:"ns1:strXML,omitempty"`
	NErrorCode       int64   `xml:"ns1:nErrorCode"`
}

// GetStatusListStatusResponse ...
type GetStatusListStatusResponse struct {
	GetStatusListStatusResult bool    `xml:"ns1:GetStatusListStatusResult"`
	DtRef                     string  `xml:"ns1:dtRef"`
	StrXML                    *string `xml:"ns1:strXML,omitempty"`
	NErrorCode                int64   `xml:"ns1:nErrorCode"`
}

// GetLatestEvents ...
type GetLatestEvents struct {
	LD                           *Logon  `xml:"ns1:LD,omitempty"`
	StrWorkStation               *string `xml:"ns1:strWorkStation,omitempty"`
	NSiteID                      int64   `xml:"ns1:nSiteID"`
	NReportID                    int64   `xml:"ns1:nReportID"`
	NMostRecentCount             int64   `xml:"ns1:nMostRecentCount"`
	NLastID                      int64   `xml:"ns1:nLastID"`
	NLastAckID                   int64   `xml:"ns1:nLastAckID"`
	StrEventReportSettings       *string `xml:"ns1:strEventReportSettings,omitempty"`
	StrEventReportDataCollection *string `xml:"ns1:strEventReportDataCollection,omitempty"`
	StrAckReportDataCollection   *string `xml:"ns1:strAckReportDataCollection,omitempty"`
	NRecordSetID                 int64   `xml:"ns1:nRecordSetID"`
	NNewLastID                   int64   `xml:"ns1:nNewLastID"`
	NNewAckLastID                int64   `xml:"ns1:nNewAckLastID"`
	NErrorCode                   int64   `xml:"ns1:nErrorCode"`
}

// GetLatestEventsResponse ...
type GetLatestEventsResponse struct {
	GetLatestEventsResult        bool    `xml:"ns1:GetLatestEventsResult"`
	StrEventReportSettings       *string `xml:"ns1:strEventReportSettings,omitempty"`
	StrEventReportDataCollection *string `xml:"ns1:strEventReportDataCollection,omitempty"`
	StrAckReportDataCollection   *string `xml:"ns1:strAckReportDataCollection,omitempty"`
	NRecordSetID                 int64   `xml:"ns1:nRecordSetID"`
	NNewLastID                   int64   `xml:"ns1:nNewLastID"`
	NNewAckLastID                int64   `xml:"ns1:nNewAckLastID"`
	NErrorCode                   int64   `xml:"ns1:nErrorCode"`
}

// RunReportDefaults ...
type RunReportDefaults struct {
	L                   *Logon  `xml:"ns1:L,omitempty"`
	NReportType         int     `xml:"ns1:nReportType"`
	NTableID            int64   `xml:"ns1:nTableID"`
	NID                 int64   `xml:"ns1:nID"`
	NSiteID             int64   `xml:"ns1:nSiteID"`
	NStart              int64   `xml:"ns1:nStart"`
	NNumberOfRows       int64   `xml:"ns1:nNumberOfRows"`
	StrStartDate        *string `xml:"ns1:strStartDate,omitempty"`
	BUseStartDate       bool    `xml:"ns1:bUseStartDate"`
	StrEndDate          *string `xml:"ns1:strEndDate,omitempty"`
	BUseEndDate         bool    `xml:"ns1:bUseEndDate"`
	StrXML              *string `xml:"ns1:strXML,omitempty"`
	NErrorCode          int64   `xml:"ns1:nErrorCode"`
	StrErrorXML         *string `xml:"ns1:strErrorXML,omitempty"`
	DeviceReportDetails int     `xml:"ns1:deviceReportDetails"`
	ControllerID        int64   `xml:"ns1:ControllerID"`
	NLanguage           int     `xml:"ns1:nLanguage"`
	NRecordGroup        int64   `xml:"ns1:nRecordGroup"`
}

// RunReportDefaultsResponse ...
type RunReportDefaultsResponse struct {
	RunReportDefaultsResult bool    `xml:"ns1:RunReportDefaultsResult"`
	StrXML                  *string `xml:"ns1:strXML,omitempty"`
	NErrorCode              int64   `xml:"ns1:nErrorCode"`
	StrErrorXML             *string `xml:"ns1:strErrorXML,omitempty"`
}

// RunReport ...
type RunReport struct {
	L                   *Logon  `xml:"ns1:L,omitempty"`
	NReportType         int     `xml:"ns1:nReportType"`
	NTableID            int64   `xml:"ns1:nTableID"`
	NID                 int64   `xml:"ns1:nID"`
	NSiteID             int64   `xml:"ns1:nSiteID"`
	ControllerID        int64   `xml:"ns1:ControllerID"`
	NStart              int64   `xml:"ns1:nStart"`
	NNumberOfRows       int64   `xml:"ns1:nNumberOfRows"`
	NLanguage           int     `xml:"ns1:nLanguage"`
	NRecordGroup        int64   `xml:"ns1:nRecordGroup"`
	StrStartDate        *string `xml:"ns1:strStartDate,omitempty"`
	BUseStartDate       bool    `xml:"ns1:bUseStartDate"`
	StrEndDate          *string `xml:"ns1:strEndDate,omitempty"`
	BUseEndDate         bool    `xml:"ns1:bUseEndDate"`
	StrXML              *string `xml:"ns1:strXML,omitempty"`
	NErrorCode          int64   `xml:"ns1:nErrorCode"`
	StrErrorXML         *string `xml:"ns1:strErrorXML,omitempty"`
	DeviceReportDetails int     `xml:"ns1:deviceReportDetails"`
}

// RunReportResponse ...
type RunReportResponse struct {
	RunReportResult bool    `xml:"ns1:RunReportResult"`
	StrXML          *string `xml:"ns1:strXML,omitempty"`
	NErrorCode      int64   `xml:"ns1:nErrorCode"`
	StrErrorXML     *string `xml:"ns1:strErrorXML,omitempty"`
}

// FindRecords ...
type FindRecords struct {
	L               *Logon       `xml:"ns1:L,omitempty"`
	NTableID        int64        `xml:"ns1:nTableID"`
	NParent         int64        `xml:"ns1:nParent"`
	NPage           int64        `xml:"ns1:nPage"`
	NSortField      int64        `xml:"ns1:nSortField"`
	BSortDirection  bool         `xml:"ns1:bSortDirection"`
	StrFieldName    *string      `xml:"ns1:strFieldName,omitempty"`
	BContain        bool         `xml:"ns1:bContain"`
	StrSearchString *string      `xml:"ns1:strSearchString,omitempty"`
	NMinValue       int64        `xml:"ns1:nMinValue"`
	NMaxValue       int64        `xml:"ns1:nMaxValue"`
	StartDate       string       `xml:"ns1:startDate"`
	EndDate         string       `xml:"ns1:endDate"`
	List            *ArrayOflong `xml:"ns1:list,omitempty"`
	BNoMoreRows     bool         `xml:"ns1:bNoMoreRows"`
	RData           *DeviceNames `xml:"ns1:RData,omitempty"`
	NErrorCode      int64        `xml:"ns1:nErrorCode"`
	StrErrorXML     *string      `xml:"ns1:strErrorXML,omitempty"`
	NFieldID        int64        `xml:"ns1:nFieldID"`
}

// FindRecordsResponse ...
type FindRecordsResponse struct {
	FindRecordsResult bool         `xml:"ns1:FindRecordsResult"`
	BNoMoreRows       bool         `xml:"ns1:bNoMoreRows"`
	RData             *DeviceNames `xml:"ns1:RData,omitempty"`
	NErrorCode        int64        `xml:"ns1:nErrorCode"`
	StrErrorXML       *string      `xml:"ns1:strErrorXML,omitempty"`
}

// GetImageData ...
type GetImageData struct {
	L          *Logon      `xml:"ns1:L,omitempty"`
	NSiteID    int64       `xml:"ns1:nSiteID"`
	NImageID   int64       `xml:"ns1:nImageID"`
	Data       *CImageData `xml:"ns1:Data,omitempty"`
	NErrorCode int64       `xml:"ns1:nErrorCode"`
}

// GetImageDataResponse ...
type GetImageDataResponse struct {
	GetImageDataResult bool        `xml:"ns1:GetImageDataResult"`
	Data               *CImageData `xml:"ns1:Data,omitempty"`
	NErrorCode         int64       `xml:"ns1:nErrorCode"`
}

// GetVersion ...
type GetVersion struct {
	L           *Logon  `xml:"ns1:L,omitempty"`
	Version     *string `xml:"ns1:version,omitempty"`
	NErrorCode  int64   `xml:"ns1:nErrorCode"`
	StrErrorXML *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetVersionResponse ...
type GetVersionResponse struct {
	GetVersionResult bool    `xml:"ns1:GetVersionResult"`
	Version          *string `xml:"ns1:version,omitempty"`
	NErrorCode       int64   `xml:"ns1:nErrorCode"`
	StrErrorXML      *string `xml:"ns1:strErrorXML,omitempty"`
}

// PrepareEventReport ...
type PrepareEventReport struct {
	L             *Logon  `xml:"ns1:L,omitempty"`
	NSiteID       int64   `xml:"ns1:nSiteID"`
	NID           int64   `xml:"ns1:nID"`
	StrStartDate  *string `xml:"ns1:strStartDate,omitempty"`
	StrEndDate    *string `xml:"ns1:strEndDate,omitempty"`
	NControllerID *int64  `xml:"ns1:nControllerID,omitempty"`
}

// PrepareEventReportResponse ...
type PrepareEventReportResponse struct {
	PrepareEventReportResult bool    `xml:"ns1:PrepareEventReportResult"`
	StrReportHandle          *string `xml:"ns1:strReportHandle,omitempty"`
	NErrorCode               int64   `xml:"ns1:nErrorCode"`
	StrErrorXML              *string `xml:"ns1:strErrorXML,omitempty"`
}

// ExecuteEventReport ...
type ExecuteEventReport struct {
	L               *Logon  `xml:"ns1:L,omitempty"`
	StrReportHandle *string `xml:"ns1:strReportHandle,omitempty"`
	NStartID        *int64  `xml:"ns1:nStartID,omitempty"`
}

// ExecuteEventReportResponse ...
type ExecuteEventReportResponse struct {
	ExecuteEventReportResult bool    `xml:"ns1:ExecuteEventReportResult"`
	StrResultHandle          *string `xml:"ns1:strResultHandle,omitempty"`
	NErrorCode               int64   `xml:"ns1:nErrorCode"`
	StrErrorXML              *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetEventReportData ...
type GetEventReportData struct {
	L                *Logon  `xml:"ns1:L,omitempty"`
	StrResultHandle  *string `xml:"ns1:strResultHandle,omitempty"`
	NNumberOfResults *int64  `xml:"ns1:nNumberOfResults,omitempty"`
}

// GetEventReportDataResponse ...
type GetEventReportDataResponse struct {
	GetEventReportDataResult bool                    `xml:"ns1:GetEventReportDataResult"`
	DataXML                  *string                 `xml:"ns1:DataXML,omitempty"`
	WindowInfo               *EventWindowInformation `xml:"ns1:WindowInfo,omitempty"`
	BEndOfData               bool                    `xml:"ns1:bEndOfData"`
	BEndOfEvents             bool                    `xml:"ns1:bEndOfEvents"`
	NErrorCode               int64                   `xml:"ns1:nErrorCode"`
	StrErrorXML              *string                 `xml:"ns1:strErrorXML,omitempty"`
}

// GetMostRecentEventID ...
type GetMostRecentEventID struct {
	L *Logon `xml:"ns1:L,omitempty"`
}

// GetMostRecentEventIDResponse ...
type GetMostRecentEventIDResponse struct {
	GetMostRecentEventIDResult bool    `xml:"ns1:GetMostRecentEventIDResult"`
	NMostRecentEventID         int64   `xml:"ns1:nMostRecentEventID"`
	NErrorCode                 int64   `xml:"ns1:nErrorCode"`
	StrErrorXML                *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetTableSchema ...
type GetTableSchema struct {
	L        *Logon `xml:"ns1:L,omitempty"`
	NTableID int64  `xml:"ns1:nTableID"`
}

// GetTableSchemaResponse ...
type GetTableSchemaResponse struct {
	GetTableSchemaResult bool    `xml:"ns1:GetTableSchemaResult"`
	StrXML               *string `xml:"ns1:strXML,omitempty"`
	NErrorCode           int64   `xml:"ns1:nErrorCode"`
	StrErrorXML          *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetTableIDNameMapping ...
type GetTableIDNameMapping struct {
	L              *Logon                       `xml:"ns1:L,omitempty"`
	TableIDMapping *ArrayOfKeyValueOflongstring `xml:"ns1:tableIDMapping,omitempty"`
}

// GetTableIDNameMappingResponse ...
type GetTableIDNameMappingResponse struct {
	GetTableIDNameMappingResult bool                         `xml:"ns1:GetTableIDNameMappingResult"`
	TableIDMapping              *ArrayOfKeyValueOflongstring `xml:"ns1:tableIDMapping,omitempty"`
	NErrorCode                  int64                        `xml:"ns1:nErrorCode"`
	StrErrorXML                 *string                      `xml:"ns1:strErrorXML,omitempty"`
}

// WhoAmI ...
type WhoAmI struct {
	L           *Logon  `xml:"ns1:L,omitempty"`
	StrXML      *string `xml:"ns1:strXML,omitempty"`
	NErrorCode  int64   `xml:"ns1:nErrorCode"`
	StrErrorXML *string `xml:"ns1:strErrorXML,omitempty"`
}

// WhoAmIResponse ...
type WhoAmIResponse struct {
	WhoAmIResult bool    `xml:"ns1:WhoAmIResult"`
	StrXML       *string `xml:"ns1:strXML,omitempty"`
	NErrorCode   int64   `xml:"ns1:nErrorCode"`
	StrErrorXML  *string `xml:"ns1:strErrorXML,omitempty"`
}

// GetLicense ...
type GetLicense struct {
	L     *Logon `xml:"ns1:L,omitempty"`
	NSite int64  `xml:"ns1:nSite"`
	NID   int64  `xml:"ns1:nID"`
}

// GetLicenseResponse ...
type GetLicenseResponse struct {
	GetLicenseResult bool          `xml:"ns1:GetLicenseResult"`
	NErrorCode       int64         `xml:"ns1:nErrorCode"`
	StrErrorXML      *string       `xml:"ns1:strErrorXML,omitempty"`
	Data             *CLicenseData `xml:"ns1:Data,omitempty"`
}

// GetReportResultsStatus ...
type GetReportResultsStatus struct {
	L            *Logon  `xml:"ns1:L,omitempty"`
	ResultHandle *string `xml:"ns1:resultHandle,omitempty"`
	NStatus      int64   `xml:"ns1:nStatus"`
}

// GetReportResultsStatusResponse ...
type GetReportResultsStatusResponse struct {
	GetReportResultsStatusResult bool  `xml:"ns1:GetReportResultsStatusResult"`
	NStatus                      int64 `xml:"ns1:nStatus"`
}

// PrepareRecordEventQuery ...
type PrepareRecordEventQuery struct {
	L             *Logon  `xml:"ns1:L,omitempty"`
	NTableID      int64   `xml:"ns1:nTableID"`
	NID           int64   `xml:"ns1:nID"`
	NSiteID       int64   `xml:"ns1:nSiteID"`
	NControllerID int64   `xml:"ns1:nControllerID"`
	NErrorCode    int64   `xml:"ns1:nErrorCode"`
	StrErrorXML   *string `xml:"ns1:strErrorXML,omitempty"`
}

// PrepareRecordEventQueryResponse ...
type PrepareRecordEventQueryResponse struct {
	PrepareRecordEventQueryResult bool    `xml:"ns1:PrepareRecordEventQueryResult"`
	NErrorCode                    int64   `xml:"ns1:nErrorCode"`
	StrErrorXML                   *string `xml:"ns1:strErrorXML,omitempty"`
	StrSQLHandle                  *string `xml:"ns1:strSQLHandle,omitempty"`
}

// AnyType ...
type AnyType string

// AnyURI ...
type AnyURI string

// Base64Binary ...
type Base64Binary string

// Boolean ...
type Boolean bool

// Byte ...
type Byte int8

// DateTime ...
type DateTime string

// Decimal ...
type Decimal float64

// Double ...
type Double float64

// Float ...
type Float float32

// Long ...
type Long int64

// QName ...
type QName xml.Name

// Short ...
type Short int16

// UnsignedByte ...
type UnsignedByte uint8

// UnsignedInt ...
type UnsignedInt uint32

// UnsignedLong ...
type UnsignedLong uint64

// UnsignedShort ...
type UnsignedShort uint16

// Duration ...
type Duration string

// FactoryType ...
type FactoryType xml.Name

// Id ...
type Id string

// Ref ...
type Ref string

// Logon ...
type Logon struct {
	LogonType int64   `xml:"ns3:LogonType"`
	Password  *string `xml:"ns3:Password,omitempty"`
	UserName  *string `xml:"ns3:UserName,omitempty"`
}

// DeviceNames ...
type DeviceNames struct {
	RecordData *ArrayOfDeviceName `xml:"ns3:RecordData,omitempty"`
}

// ArrayOfDeviceName ...
type ArrayOfDeviceName struct {
	DeviceName []DeviceName `xml:"ns3:DeviceName,omitempty"`
}

// DeviceName ...
type DeviceName struct {
	Data         int64   `xml:"ns3:Data"`
	Data2        int64   `xml:"ns3:Data2"`
	Data3        int64   `xml:"ns3:Data3"`
	Data4        int64   `xml:"ns3:Data4"`
	Data5        int64   `xml:"ns3:Data5"`
	HostParent   int64   `xml:"ns3:HostParent"`
	ID           int64   `xml:"ns3:ID"`
	LastOperator *string `xml:"ns3:LastOperator,omitempty"`
	Name1        *string `xml:"ns3:Name1,omitempty"`
	Name2        *string `xml:"ns3:Name2,omitempty"`
	Parent       int64   `xml:"ns3:Parent"`
	RecordGroup  int64   `xml:"ns3:RecordGroup"`
	SpareString1 *string `xml:"ns3:SpareString1,omitempty"`
	SpareString2 *string `xml:"ns3:SpareString2,omitempty"`
	StringData   *string `xml:"ns3:StringData,omitempty"`
}

// ReportDataCollection ...
type ReportDataCollection struct {
	ReportData *ArrayOfReportData `xml:"ns3:ReportData,omitempty"`
}

// ArrayOfReportData ...
type ArrayOfReportData struct {
	ReportData []ReportData `xml:"ns3:ReportData,omitempty"`
}

// ReportData ...
type ReportData struct {
	AcknowledgedTime string  `xml:"ns3:AcknowledgedTime"`
	Description      *string `xml:"ns3:Description,omitempty"`
	DeviceType       int64   `xml:"ns3:DeviceType"`
	DoorID           int64   `xml:"ns3:DoorID"`
	DoorName         *string `xml:"ns3:DoorName,omitempty"`
	EventID          int64   `xml:"ns3:EventID"`
	EventTypeID      int64   `xml:"ns3:EventTypeID"`
	Field            string  `xml:"ns3:Field"`
	Logged           string  `xml:"ns3:Logged"`
	RecordIndex1     int64   `xml:"ns3:RecordIndex1"`
	RecordIndex2     int64   `xml:"ns3:RecordIndex2"`
	RecordIndex3     int64   `xml:"ns3:RecordIndex3"`
	RecordIndex4     int64   `xml:"ns3:RecordIndex4"`
	RecordIndex5     int64   `xml:"ns3:RecordIndex5"`
	UserID           int64   `xml:"ns3:UserID"`
	UserName         *string `xml:"ns3:UserName,omitempty"`
}

// MCFLOORCONTROL ...
type MCFLOORCONTROL string

// MCPGMCONTROL ...
type MCPGMCONTROL string

// MCAREACONTROL ...
type MCAREACONTROL string

// MCPROGFUNCCONTROL ...
type MCPROGFUNCCONTROL string

// MCDOORCONTROL ...
type MCDOORCONTROL string

// MCZONECONTROL ...
type MCZONECONTROL string

// MCZONETYPE ...
type MCZONETYPE string

// MCMODULECOMMAND ...
type MCMODULECOMMAND string

// MCMODULECOMMANDTYPE ...
type MCMODULECOMMANDTYPE string

// MCSERVICECONTROL ...
type MCSERVICECONTROL string

// LogonData ...
type LogonData struct {
	Cookie        int64   `xml:"ns4:Cookie"`
	Hash64        *string `xml:"ns4:Hash64,omitempty"`
	Logon         *string `xml:"ns4:Logon,omitempty"`
	NT            bool    `xml:"ns4:NT"`
	OperatorID    int64   `xml:"ns4:OperatorID"`
	OperatorName  *string `xml:"ns4:OperatorName,omitempty"`
	OperatorName2 *string `xml:"ns4:OperatorName2,omitempty"`
	Password      *string `xml:"ns4:Password,omitempty"`
}

// CImageData ...
type CImageData struct {
	Bytes *ByteCollection `xml:"ns4:Bytes,omitempty"`
	ID    int64           `xml:"ns4:ID"`
	Name  *string         `xml:"ns4:Name,omitempty"`
	Type  *string         `xml:"ns4:Type,omitempty"`
}

// ByteCollection ...
type ByteCollection struct {
	UnsignedByte []uint8 `xml:"ns4:unsignedByte"`
}

// EventWindowInformation ...
type EventWindowInformation struct {
	TotalMostRecentEventID  int64 `xml:"ns4:TotalMostRecentEventID"`
	TotalOldestEventID      int64 `xml:"ns4:TotalOldestEventID"`
	WindowMostRecentEventID int64 `xml:"ns4:WindowMostRecentEventID"`
	WindowOldestEventID     int64 `xml:"ns4:WindowOldestEventID"`
	WindowSize              int64 `xml:"ns4:WindowSize"`
}

// CLicenseData ...
type CLicenseData struct {
	ActiveDirectoryOperators               *string `xml:"ns4:ActiveDirectoryOperators,omitempty"`
	ActiveDirectoryOperatorsExpiry         string  `xml:"ns4:ActiveDirectoryOperatorsExpiry"`
	ActiveDirectoryUsers                   *string `xml:"ns4:ActiveDirectoryUsers,omitempty"`
	ActiveDirectoryUsersExpiry             string  `xml:"ns4:ActiveDirectoryUsersExpiry"`
	Apartments                             *string `xml:"ns4:Apartments,omitempty"`
	ApartmentsExpiry                       string  `xml:"ns4:ApartmentsExpiry"`
	ApplicationVersion                     *string `xml:"ns4:ApplicationVersion,omitempty"`
	Attendance                             *string `xml:"ns4:Attendance,omitempty"`
	AttendanceExpiry                       string  `xml:"ns4:AttendanceExpiry"`
	BetaFeatures                           *string `xml:"ns4:BetaFeatures,omitempty"`
	BetaFeaturesExpiry                     string  `xml:"ns4:BetaFeaturesExpiry"`
	Biometrics                             *string `xml:"ns4:Biometrics,omitempty"`
	BiometricsExpiry                       string  `xml:"ns4:BiometricsExpiry"`
	BookingSystem                          *string `xml:"ns4:BookingSystem,omitempty"`
	BookingSystemExpiry                    string  `xml:"ns4:BookingSystemExpiry"`
	CSVImport                              *string `xml:"ns4:CSVImport,omitempty"`
	CSVImportExpiry                        string  `xml:"ns4:CSVImportExpiry"`
	CalendarActions                        *string `xml:"ns4:CalendarActions,omitempty"`
	CalendarActionsExpiry                  string  `xml:"ns4:CalendarActionsExpiry"`
	DataSyncService                        *string `xml:"ns4:DataSyncService,omitempty"`
	DataSyncServiceExpiry                  string  `xml:"ns4:DataSyncServiceExpiry"`
	DoorGroupsInDoorGroups                 *string `xml:"ns4:DoorGroupsInDoorGroups,omitempty"`
	DoorGroupsInDoorGroupsExpiry           string  `xml:"ns4:DoorGroupsInDoorGroupsExpiry"`
	EMailOnEventExpiry                     string  `xml:"ns4:EMailOnEventExpiry"`
	EMailOnEvents                          *string `xml:"ns4:EMailOnEvents,omitempty"`
	EMailReports                           *string `xml:"ns4:EMailReports,omitempty"`
	EMailReportsExpiry                     string  `xml:"ns4:EMailReportsExpiry"`
	FloorPlans                             *string `xml:"ns4:FloorPlans,omitempty"`
	FloorPlansExpiry                       string  `xml:"ns4:FloorPlansExpiry"`
	GXSOAPInterface                        *string `xml:"ns4:GXSOAPInterface,omitempty"`
	GXSOAPInterfaceExpiry                  string  `xml:"ns4:GXSOAPInterfaceExpiry"`
	ID                                     int64   `xml:"ns4:ID"`
	Index                                  int64   `xml:"ns4:Index"`
	InovonicsIntegration                   *string `xml:"ns4:InovonicsIntegration,omitempty"`
	InovonicsIntegrationExpiry             string  `xml:"ns4:InovonicsIntegrationExpiry"`
	InstallerAddress                       *string `xml:"ns4:InstallerAddress,omitempty"`
	InstallerContact                       *string `xml:"ns4:InstallerContact,omitempty"`
	InstallerEmail                         *string `xml:"ns4:InstallerEmail,omitempty"`
	InstallerFax                           *string `xml:"ns4:InstallerFax,omitempty"`
	InstallerName                          *string `xml:"ns4:InstallerName,omitempty"`
	InstallerPhone                         *string `xml:"ns4:InstallerPhone,omitempty"`
	KeySecureIntegration                   *string `xml:"ns4:KeySecureIntegration,omitempty"`
	KeySecureIntegrationExpiry             string  `xml:"ns4:KeySecureIntegrationExpiry"`
	KeyWatcherIntegration                  *string `xml:"ns4:KeyWatcherIntegration,omitempty"`
	KeyWatcherIntegrationExpiry            string  `xml:"ns4:KeyWatcherIntegrationExpiry"`
	LicenseData                            *string `xml:"ns4:LicenseData,omitempty"`
	LicenseVersion                         *string `xml:"ns4:LicenseVersion,omitempty"`
	MachineData                            *string `xml:"ns4:MachineData,omitempty"`
	MusterReport                           *string `xml:"ns4:MusterReport,omitempty"`
	MusterReportExpiry                     string  `xml:"ns4:MusterReportExpiry"`
	Name                                   *string `xml:"ns4:Name,omitempty"`
	Name2                                  *string `xml:"ns4:Name2,omitempty"`
	NumOfAllegionDoors                     *string `xml:"ns4:NumOfAllegionDoors,omitempty"`
	NumOfAllegionDoorsExpiry               string  `xml:"ns4:NumOfAllegionDoorsExpiry"`
	NumOfControllerSNMP                    *string `xml:"ns4:NumOfControllerSNMP,omitempty"`
	NumOfControllerSNMPExpiry              string  `xml:"ns4:NumOfControllerSNMPExpiry"`
	NumOfSIP                               *string `xml:"ns4:NumOfSIP,omitempty"`
	NumOfSIPExpiry                         string  `xml:"ns4:NumOfSIPExpiry"`
	NumberOfAperioDoors                    *string `xml:"ns4:NumberOfAperioDoors,omitempty"`
	NumberOfAperioDoorsExpiry              string  `xml:"ns4:NumberOfAperioDoorsExpiry"`
	NumberOfAreas                          *string `xml:"ns4:NumberOfAreas,omitempty"`
	NumberOfAreasExpiry                    string  `xml:"ns4:NumberOfAreasExpiry"`
	NumberOfBiometrics                     *string `xml:"ns4:NumberOfBiometrics,omitempty"`
	NumberOfBiometricsExpiry               string  `xml:"ns4:NumberOfBiometricsExpiry"`
	NumberOfCameras                        *string `xml:"ns4:NumberOfCameras,omitempty"`
	NumberOfCamerasExpiry                  string  `xml:"ns4:NumberOfCamerasExpiry"`
	NumberOfClients                        *string `xml:"ns4:NumberOfClients,omitempty"`
	NumberOfClientsExpiry                  string  `xml:"ns4:NumberOfClientsExpiry"`
	NumberOfControllers                    *string `xml:"ns4:NumberOfControllers,omitempty"`
	NumberOfControllersExpiry              string  `xml:"ns4:NumberOfControllersExpiry"`
	NumberOfDVRs                           *string `xml:"ns4:NumberOfDVRs,omitempty"`
	NumberOfDVRsExpiry                     string  `xml:"ns4:NumberOfDVRsExpiry"`
	NumberOfDoors                          *string `xml:"ns4:NumberOfDoors,omitempty"`
	NumberOfDoorsExpiry                    string  `xml:"ns4:NumberOfDoorsExpiry"`
	NumberOfElevatorHLIs                   *string `xml:"ns4:NumberOfElevatorHLIs,omitempty"`
	NumberOfElevatorHLIsExpiry             string  `xml:"ns4:NumberOfElevatorHLIsExpiry"`
	NumberOfICT485Readers                  *string `xml:"ns4:NumberOfICT485Readers,omitempty"`
	NumberOfICT485ReadersExpiry            string  `xml:"ns4:NumberOfICT485ReadersExpiry"`
	NumberOfInovonicsIntegration           *string `xml:"ns4:NumberOfInovonicsIntegration,omitempty"`
	NumberOfInovonicsIntegrationExpiry     string  `xml:"ns4:NumberOfInovonicsIntegrationExpiry"`
	NumberOfIntercoms                      *string `xml:"ns4:NumberOfIntercoms,omitempty"`
	NumberOfIntercomsExpiry                string  `xml:"ns4:NumberOfIntercomsExpiry"`
	NumberOfKabaLocks                      *string `xml:"ns4:NumberOfKabaLocks,omitempty"`
	NumberOfKabaLocksExpiry                string  `xml:"ns4:NumberOfKabaLocksExpiry"`
	NumberOfOSDPNumbers                    *string `xml:"ns4:NumberOfOSDPNumbers,omitempty"`
	NumberOfOSDPReaders                    *string `xml:"ns4:NumberOfOSDPReaders,omitempty"`
	NumberOfOperators                      *string `xml:"ns4:NumberOfOperators,omitempty"`
	NumberOfOperatorsExpiry                string  `xml:"ns4:NumberOfOperatorsExpiry"`
	NumberOfPTZEventTriggers               *string `xml:"ns4:NumberOfPTZEventTriggers,omitempty"`
	NumberOfPTZEventTriggersExpiry         string  `xml:"ns4:NumberOfPTZEventTriggersExpiry"`
	NumberOfRedwallIntegration             *string `xml:"ns4:NumberOfRedwallIntegration,omitempty"`
	NumberOfRedwallIntegrationExpiry       string  `xml:"ns4:NumberOfRedwallIntegrationExpiry"`
	NumberOfSallisDoors                    *string `xml:"ns4:NumberOfSallisDoors,omitempty"`
	NumberOfSallisDoorsExpiry              string  `xml:"ns4:NumberOfSallisDoorsExpiry"`
	NumberOfSaltoDoors                     *string `xml:"ns4:NumberOfSaltoDoors,omitempty"`
	NumberOfSaltoDoorsExpiry               string  `xml:"ns4:NumberOfSaltoDoorsExpiry"`
	NumberOfSites                          *string `xml:"ns4:NumberOfSites,omitempty"`
	NumberOfSitesExpiry                    string  `xml:"ns4:NumberOfSitesExpiry"`
	NumberOfThirdPartyGenericReaders       *string `xml:"ns4:NumberOfThirdPartyGenericReaders,omitempty"`
	NumberOfThirdPartyGenericReadersExpiry string  `xml:"ns4:NumberOfThirdPartyGenericReadersExpiry"`
	NumberOfUsers                          *string `xml:"ns4:NumberOfUsers,omitempty"`
	NumberOfUsersExpiry                    string  `xml:"ns4:NumberOfUsersExpiry"`
	NumberOfWebOperators                   *string `xml:"ns4:NumberOfWebOperators,omitempty"`
	NumberOfWebOperatorsExpiry             string  `xml:"ns4:NumberOfWebOperatorsExpiry"`
	PINPlusNAsDuress                       *string `xml:"ns4:PINPlusNAsDuress,omitempty"`
	PINPlusNAsDuressExpiry                 string  `xml:"ns4:PINPlusNAsDuressExpiry"`
	PTZEventTrigger                        *string `xml:"ns4:PTZEventTrigger,omitempty"`
	PTZEventTriggerExpiry                  string  `xml:"ns4:PTZEventTriggerExpiry"`
	PhotoID                                *string `xml:"ns4:PhotoID,omitempty"`
	PhotoIDExpiry                          string  `xml:"ns4:PhotoIDExpiry"`
	RedwallIntegration                     *string `xml:"ns4:RedwallIntegration,omitempty"`
	RedwallIntegrationExpiry               string  `xml:"ns4:RedwallIntegrationExpiry"`
	SDKExpiry                              string  `xml:"ns4:SDKExpiry"`
	SerialNumber                           *string `xml:"ns4:SerialNumber,omitempty"`
	SiteAddress                            *string `xml:"ns4:SiteAddress,omitempty"`
	SiteContact                            *string `xml:"ns4:SiteContact,omitempty"`
	SiteEMail                              *string `xml:"ns4:SiteEMail,omitempty"`
	SiteFax                                *string `xml:"ns4:SiteFax,omitempty"`
	SiteName                               *string `xml:"ns4:SiteName,omitempty"`
	SitePhone                              *string `xml:"ns4:SitePhone,omitempty"`
	SoftwareExpiry                         string  `xml:"ns4:SoftwareExpiry"`
	SoftwareMaintenanceExpiry              string  `xml:"ns4:SoftwareMaintenanceExpiry"`
	SupportsComs                           *string `xml:"ns4:SupportsComs,omitempty"`
	SupportsComsExpiry                     string  `xml:"ns4:SupportsComsExpiry"`
	VideoIntegration                       *string `xml:"ns4:VideoIntegration,omitempty"`
	VideoVerificationExpiry                string  `xml:"ns4:VideoVerificationExpiry"`
	VingCardIntegration                    *string `xml:"ns4:VingCardIntegration,omitempty"`
	VingCardIntegrationExpiry              string  `xml:"ns4:VingCardIntegrationExpiry"`
	VisitorManagement                      *string `xml:"ns4:VisitorManagement,omitempty"`
	VisitorManagementExpiry                string  `xml:"ns4:VisitorManagementExpiry"`
}

// ArrayOflong ...
type ArrayOflong struct {
	Long []int64 `xml:"ns5:long"`
}

// KeyValueOflongstring ...
type KeyValueOflongstring struct {
	Key   int64   `xml:"ns5:Key"`
	Value *string `xml:"ns5:Value,omitempty"`
}

// ArrayOfKeyValueOflongstring - true
type ArrayOfKeyValueOflongstring struct {
	KeyValueOflongstring []KeyValueOflongstring `xml:"ns5:KeyValueOflongstring"`
}
